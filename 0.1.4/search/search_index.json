{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Ansible Production Grade Setup <p>     Production-grade Ansible playbooks and roles for infrastructure automation and configuration management.   </p> <p> </p>"},{"location":"#tech-stack","title":"Tech Stack","text":"<p>List of tools used in the project</p> <p> </p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Important</p> <p>This project uses Devbox to provide a consistent development environment. </p> <ol> <li> <p>Install Docker Docker installation guide </p> </li> <li> <p>Install Devbox Devbox installation guide </p> </li> <li> <p>Clone the repository <pre><code>git clone https://github.com/sean-njela/ansible-demo.git\ncd ansible-demo\n</code></pre></p> </li> <li> <p>Start Devbox shell</p> </li> </ol> <pre><code>devbox shell\n</code></pre> <p>First run may take several minutes to install tools, but subsequent runs spin up in seconds.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>task setup\ntask status   # check if everything is running\ntask dev      # start development stack\ntask info     # to list urls to visit\ntask cleanup-dev\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>For full documentation, setup instructions, and architecture details, visit the docs directory or run locally with:</p> <pre><code>task docs\n</code></pre> <p>Then open: http://127.0.0.1:8030/</p>"},{"location":"#tasks-automation","title":"Tasks (Automation)","text":"<p>Important</p> <p>This project is designed for a simple, one-command setup. All necessary actions are orchestrated through <code>Taskfile.yml</code>.</p> <p>The <code>Taskfile.gitflow.yml</code> provides a structured Git workflow using Git Flow. This helps in managing features, releases, and hotfixes in a standardized way. To run these tasks just its the same as running any other task. Using gitflow is optional. If you do not want the gitflow tasks, you can remove the <code>Taskfile.gitflow.yml</code> file and unlink it from the <code>Taskfile.yml</code> file (remove the <code>includes</code> section). If you cannot find the section use CTRL + F to search for <code>Taskfile.gitflow.yml</code>.</p> <p>To see all tasks:</p> <pre><code>task --list-all\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions welcome! Open an issue or submit a PR.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE</code> for more info.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>LinkedIn</li> <li>Twitter/X</li> <li>seannjela@outlook.com</li> <li>About Me</li> </ul>"},{"location":"disclaimer/","title":"Disclaimer","text":"<p>The information and resources provided in this project are intended for educational and informational purposes only.</p>"},{"location":"disclaimer/#no-warranty","title":"No Warranty","text":"<p>This project is provided \"as is\" without warranty of any kind\u2014express or implied. While I have made every effort to ensure the accuracy and reliability of the information, I make no guarantees about:</p> <ul> <li>Suitability for any specific purpose  </li> <li>Completeness or accuracy of configurations or scripts  </li> <li>Security of infrastructure or deployments  </li> </ul> <p>Use at your own risk.</p>"},{"location":"disclaimer/#for-personal-use-learning","title":"For Personal Use / Learning","text":"<p>This project is part of a personal portfolio and is primarily intended to:</p> <ul> <li>Demonstrate practical implementation of technical concepts  </li> <li>Serve as a sandbox for experimentation  </li> <li>Be a reference for future personal or professional projects  </li> </ul> <p>It is not intended for production use without proper review and adaptation.</p>"},{"location":"disclaimer/#security-and-sensitive-data","title":"Security and Sensitive Data","text":"<p>Do not reuse any credentials, tokens, secrets, or keys shown in this project. They are either fake, expired, or meant only for demonstration.</p> <p>Always handle secrets securely and follow best practices for secret management (e.g., environment variables, sealed secrets, vaults).</p>"},{"location":"disclaimer/#opinions-are-my-own","title":"Opinions Are My Own","text":"<p>All opinions, techniques, and practices shared here reflect my personal learning journey and are not affiliated with or endorsed by any employer, client, or organization.</p>"},{"location":"disclaimer/#license","title":"License","text":"<p>This project is licensed under the MIT, which permits reuse, modification, and distribution\u2014with proper attribution.</p>"},{"location":"disclaimer/#contact","title":"Contact","text":"<p>If you spot issues, risks, or have questions about how something works, feel free to reach out:</p> <ul> <li>seannjela@outlook.com</li> <li>GitHub Issues</li> </ul>"},{"location":"0-quickstart/0-prerequisites/","title":"Prerequisites","text":"<p>This project uses Devbox to manage the development environment. Devbox provides a consistent, isolated environment with all the necessary CLI tools pre-installed.</p>"},{"location":"0-quickstart/0-prerequisites/#docker","title":"Docker","text":"<ul> <li>Follow the installation instructions for your operating system.</li> </ul> <p>The rest of the tools are already installed in the devbox environment</p>"},{"location":"0-quickstart/0-prerequisites/#devbox","title":"Devbox","text":"<ul> <li>Follow the installation instructions for your operating system.</li> </ul>"},{"location":"0-quickstart/0-prerequisites/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/your-username/your-repo.git\ncd your-repo\n</code></pre>"},{"location":"0-quickstart/0-prerequisites/#start-the-devbox-environment-and-poetry-environment","title":"Start the Devbox Environment and poetry environment","text":"<pre><code>devbox shell # Start the devbox environment (this will also start the poetry environment)\npoetry install # Install dependencies\npoetry env activate # use the output to activate the poetry environment ( ONLY IF DEVBOX DOES NOT ACTIVATE THE ENVIRONMENT)\n</code></pre> <p>Note</p> <p>The first time you run <code>devbox shell</code>, it will take a few minutes to install the necessary tools. But after that it will be much faster.</p>"},{"location":"0-quickstart/1-getting-started/","title":"Getting Started","text":"<p>Welcome! This section will walk you through how to get the project up and running on your local machine or development environment.</p>"},{"location":"0-quickstart/1-getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed all the requirements. See the Prerequisites section for detailed instructions on installing these tools.</p>"},{"location":"0-quickstart/1-getting-started/#walkthrough","title":"Walkthrough","text":"<p>After everything is wired up, you can run the following commands:</p> <pre><code>task setup\n\ntask status # check if everything is running\n\n# GIVE EVERYTHING A MINUTE TO SETUP THEN\ntask dev\n</code></pre> <p>This will start the devbox environment and poetry environment and install all dependencies. And that is all you need to do to get started. (Yes, really.)</p> <p>In a seperate terminal, run:</p> <pre><code># Option 1\ntask docs\n\n# Or if you prefer the docker version:\n# Option 2\ntask docs-docker\n\n# ONLY RUN ONE OF THE ABOVE\n</code></pre> <p>Docs are then available at: http://127.0.0.1:8030/</p> <p>All other commands are in the form of tasks. The project task file is <code>Taskfile.yaml</code>.</p> <pre><code>task --list-all # to see all project tasks\ntask &lt;command&gt; # usage\n</code></pre> <p>The project also uses gitflow for version control with gh-pages deployment automation. This is optional but you can also automate it using the <code>Taskfile.gitflow.yaml</code> file.</p> <pre><code>task -t Taskfile.gitflow.yaml --list-all # to see all gitflow tasks\ntask -t Taskfile.gitflow.yaml &lt;command&gt; # usage\n</code></pre> <p>See the Tasks section for more information on all tasks.</p>"},{"location":"0-quickstart/1-getting-started/#cleanup","title":"Cleanup","text":"<p>To tear everything down after testing:</p> <pre><code>task cleanup-dev # to cleanup everything running locally\ntask cleanup-prod # to cleanup everything running in production (IF YOU USED ANY PROD. WORKFLOWS)\ntask cleanup-all # to cleanup everything (local and production)\n</code></pre>"},{"location":"0-quickstart/1-getting-started/#need-help","title":"Need Help?","text":"<p>If you get stuck:</p> <ul> <li>Check the Troubleshooting guide.</li> <li>Open an issue on GitHub</li> </ul> <p>Happy building!</p>"},{"location":"1-architecture/0-overview/","title":"System Architecture Overview","text":"<p>This section provides a high-level overview of the architecture and design decisions behind the project. It outlines the system's core components, their responsibilities, and how they interact.</p>"},{"location":"1-architecture/0-overview/#design-philosophy","title":"Design Philosophy","text":"<p>Summarise your approach or values. Examples:</p> <ul> <li>Modular and composable</li> <li>Secure by default</li> <li>Automation-first (e.g., IaC, CI/CD)</li> <li>Portable/local-dev friendly</li> </ul>"},{"location":"1-architecture/0-overview/#core-components","title":"Core Components","text":""},{"location":"1-architecture/0-overview/#1-infrastructure","title":"1. Infrastructure","text":"<ul> <li>Describe how infrastructure is provisioned (e.g., Terraform, Pulumi)</li> <li>Where it's deployed (e.g., local Kind cluster, cloud, etc.)</li> <li>Example:</li> <li>Kind cluster created via <code>task dev</code></li> <li>Terraform used to manage Argo CD and related resources</li> </ul>"},{"location":"1-architecture/0-overview/#2-cicd","title":"2. CI/CD","text":"<ul> <li>What tools handle deployment?</li> <li>Example:</li> <li>Argo CD handles Kubernetes app delivery using the App of Apps pattern</li> <li>Image updates via argocd-image-updater</li> <li>Optional notification layer (e.g., Slack integration)</li> </ul>"},{"location":"1-architecture/0-overview/#3-secrets-configuration","title":"3. Secrets &amp; Configuration","text":"<ul> <li>Mention secret handling (e.g., Sealed Secrets, SOPS, Vault)</li> <li>Config management tools (e.g., Helm, Kustomize)</li> </ul>"},{"location":"1-architecture/0-overview/#architecture-diagram","title":"Architecture Diagram","text":"<p>Add a visual overview of your system if available.</p> <p></p> <p>If not available yet, note:</p> <p>Architecture diagram to be added in a future update.</p>"},{"location":"1-architecture/0-overview/#data-control-flow","title":"Data / Control Flow","text":"<p>Explain the high-level lifecycle or data flow:</p> <ol> <li>User runs <code>task dev</code></li> <li>Terraform provisions resources</li> <li>Argo CD bootstraps itself and deploys other apps</li> <li>Image updater checks container registries and pushes updates</li> <li>Notifications triggered via webhook \u2192 Slack</li> </ol>"},{"location":"1-architecture/0-overview/#related-pages","title":"Related Pages","text":"<ul> <li>Quickstart: Getting Started</li> <li>Topics / Application Layer</li> <li>Taskfile Automation</li> </ul>"},{"location":"2-project/0-topic1/","title":"Project Topic 1","text":""},{"location":"2-project/1-topic2/","title":"Project Topic 2","text":""},{"location":"2-project/2-topic3/","title":"Project Topic 3","text":""},{"location":"2-project/notes/","title":"General Notes","text":"<p>Ansible is an open-source automation tool for configuration management, application deployment, orchestration, and provisioning. Below are structured, detailed notes.</p>"},{"location":"2-project/notes/#1-core-concepts","title":"1. Core Concepts","text":"<ul> <li>Agentless architecture   Runs over SSH or WinRM, no agent software required on managed nodes. Reduces attack surface and maintenance overhead.</li> <li>Idempotency   Tasks always converge systems to the desired state. Re-running produces the same result if the system is already compliant.</li> <li>Declarative style   Users describe the desired state, not the steps to reach it.</li> <li>Push model   Control node pushes configurations to managed hosts.</li> </ul>"},{"location":"2-project/notes/#2-components","title":"2. Components","text":"<ul> <li>Control node   Machine where Ansible is installed and playbooks are executed.</li> <li>Managed nodes (hosts)   Target machines that Ansible configures, requiring Python (for Linux) or PowerShell (for Windows).</li> <li>Inventory   A list of managed nodes. Formats: INI, YAML, dynamic inventories via scripts, plugins, or cloud APIs.</li> <li>Modules   Units of work (e.g., install a package, copy a file, start a service). Written in Python, but can be any executable returning JSON.</li> <li>Plugins   Extend Ansible\u2019s behaviour (e.g., connection plugins, callback plugins, lookup plugins).</li> <li>Playbooks   YAML files defining automation workflows with tasks and roles.</li> <li>Roles   Structured way to organise playbooks into reusable units (tasks, handlers, templates, files, vars, defaults).</li> <li>Collections   Packaged modules, plugins, and roles, distributed via Ansible Galaxy.</li> <li>Facts   System information collected by <code>setup</code> module (e.g., OS, IP addresses, CPU).</li> </ul>"},{"location":"2-project/notes/#3-architecture","title":"3. Architecture","text":"<ol> <li>Inventory definition \u2192 static (file) or dynamic (cloud APIs).</li> <li>Playbook execution \u2192 sequential tasks applied to groups of hosts.</li> <li>Modules invoked \u2192 executed on nodes via SSH/WinRM.</li> <li>Results gathered \u2192 control node collects JSON outputs.</li> <li>Handlers triggered \u2192 run only if notified by a task change.</li> </ol>"},{"location":"2-project/notes/#4-playbooks","title":"4. Playbooks","text":"<ul> <li> <p>Format: YAML, indentation sensitive.</p> </li> <li> <p>Structure:</p> </li> </ul> <pre><code>- name: Install and start Nginx\n  hosts: webservers\n  become: yes   # escalate privilege\n  tasks:\n    - name: Install Nginx\n      apt:\n        name: nginx\n        state: present\n    - name: Ensure Nginx is running\n      service:\n        name: nginx\n        state: started\n</code></pre> <ul> <li> <p>Key elements:</p> </li> <li> <p><code>hosts</code>: target group.</p> </li> <li><code>tasks</code>: actions.</li> <li><code>vars</code>: variables.</li> <li><code>handlers</code>: conditional actions on change.</li> <li><code>templates</code>: Jinja2 templates for dynamic file creation.</li> </ul>"},{"location":"2-project/notes/#5-execution-workflow","title":"5. Execution Workflow","text":"<ol> <li>Define inventory.</li> <li>Create playbooks or ad-hoc commands.</li> <li>Run <code>ansible-playbook</code> against inventory.</li> <li>Ansible establishes SSH/WinRM sessions.</li> <li>Modules execute remotely, results sent back in JSON.</li> </ol>"},{"location":"2-project/notes/#6-variables-and-templates","title":"6. Variables and Templates","text":"<ul> <li> <p>Variables can come from:</p> </li> <li> <p>Inventory (host/group vars).</p> </li> <li>Playbooks.</li> <li>Extra-vars at runtime (<code>-e</code>).</li> <li>Fact gathering.</li> <li>Precedence matters (extra-vars override all).</li> <li>Templating with Jinja2:</li> </ul> <pre><code>server_name {{ inventory_hostname }};\n</code></pre>"},{"location":"2-project/notes/#7-handlers","title":"7. Handlers","text":"<ul> <li>Triggered when a task changes state.</li> <li>Example:</li> </ul> <pre><code>- name: Restart nginx\n  service:\n    name: nginx\n    state: restarted\n  listen: restart nginx\n</code></pre>"},{"location":"2-project/notes/#8-security","title":"8. Security","text":"<ul> <li>Vault: encrypts sensitive data (passwords, keys).</li> <li>SSH keys: secure authentication.</li> <li>Principle of least privilege: use <code>become</code> only when necessary.</li> </ul>"},{"location":"2-project/notes/#9-orchestration","title":"9. Orchestration","text":"<ul> <li> <p>Beyond configuration, can coordinate multi-node actions:</p> </li> <li> <p>Rolling updates.</p> </li> <li>Blue/green deployments.</li> <li>Cluster management.</li> </ul>"},{"location":"2-project/notes/#10-advantages","title":"10. Advantages","text":"<ul> <li>Simple to learn (YAML, human-readable).</li> <li>No agents required.</li> <li>Large module ecosystem.</li> <li>Integrates with CI/CD pipelines.</li> <li>Scales to thousands of nodes.</li> </ul>"},{"location":"2-project/notes/#11-disadvantages","title":"11. Disadvantages","text":"<ul> <li>Performance: slower than agent-based tools for very large infrastructures due to SSH overhead.</li> <li>Error handling: limited complex conditional flows compared to full scripting.</li> <li>Python dependency: required on Linux nodes.</li> <li>State management: not as robust as tools like Terraform for infra provisioning.</li> </ul>"},{"location":"2-project/notes/#12-best-practices","title":"12. Best Practices","text":"<ul> <li>Use roles and collections for modular design.</li> <li>Keep inventory dynamic via cloud provider plugins.</li> <li>Encrypt secrets with Vault.</li> <li>Enforce idempotency in all tasks.</li> <li>Use linting tools (<code>ansible-lint</code>) to maintain quality.</li> <li>Test with Molecule.</li> </ul>"},{"location":"2-project/notes/#ansible-cheat-sheet","title":"Ansible Cheat Sheet","text":""},{"location":"2-project/notes/#basics","title":"Basics","text":"<pre><code>ansible --version                   # Show Ansible version installed on the control node\nansible all -m ping -i inventory    # Ping all hosts defined in inventory file to test connectivity\nansible all -a \"uptime\"             # Run an ad-hoc command (\"uptime\") on all hosts\nansible-playbook playbook.yml       # Execute a playbook against inventory hosts\nansible-galaxy install &lt;role&gt;       # Download and install a reusable role from Ansible Galaxy\nansible-vault create secrets.yml    # Create a new encrypted file for secrets (opens editor)\nansible-vault edit secrets.yml      # Edit an encrypted file (requires vault password)\nansible-vault encrypt file.yml      # Encrypt an existing plaintext file\nansible-vault decrypt file.yml      # Decrypt an encrypted file back to plaintext\n</code></pre>"},{"location":"2-project/notes/#inventory-file","title":"Inventory File","text":"<p>It can be in INI format or YAML.</p> <p>INI format</p> <pre><code>[webservers]                                  # Group name\nweb1 ansible_host=192.168.1.10 ansible_user=ubuntu   # Alias web1 points to host at 192.168.1.10 using user ubuntu\nweb2 ansible_host=192.168.1.11                # Alias web2 points to host at 192.168.1.11 (default user assumed)\n\n[dbservers]                                   # Another group\ndb1 ansible_host=192.168.1.20                 # Alias db1 points to host at 192.168.1.20\n</code></pre> <p>YAML format</p> <pre><code>all:\n  hosts:\n    web1:                                     # Alias web1\n      ansible_host: 192.168.1.10              # Actual connection IP\n    web2:                                     # Alias web2\n      ansible_host: 192.168.1.11              # Actual connection IP\n  children:\n    dbservers:                                # Group of database servers\n      hosts:\n        db1:                                  # Alias db1\n          ansible_host: 192.168.1.20          # Actual connection IP\n</code></pre> <p>Run with a custom inventory:</p> <pre><code>ansible-playbook -i inventory.ini site.yml    # Use inventory.ini explicitly when running a playbook\n</code></pre>"},{"location":"2-project/notes/#cli-commands","title":"CLI Commands","text":"<pre><code>ansible --version                        # Show version\nansible all -m ping -i inventory.yml     # Ping all hosts listed in inventory\nansible webservers -m apt -a \"name=nginx state=present\" -b   # Install nginx via apt on all webservers with sudo\nansible dbservers -m service -a \"name=mysql state=started\" -b  # Ensure MySQL service started on dbservers\nansible all -m copy -a \"src=/etc/hosts dest=/tmp/hosts\"       # Copy file from control node to all hosts\nansible all -m file -a \"path=/tmp/test state=directory\"       # Ensure a directory exists\nansible all -a \"uptime\"                  # Run ad-hoc command \"uptime\" everywhere\n\nansible-playbook playbook.yml            # Run a playbook\nansible-playbook site.yml -C             # Dry run mode (check only, no changes made)\nansible-playbook site.yml -v             # Run with verbose output (-vvv for maximum detail)\nansible-playbook site.yml --limit web1   # Limit execution to only web1\nansible-playbook site.yml --step         # Step through tasks interactively\nansible-inventory -i inventory.yml --list  # Print expanded/parsed inventory\n\nansible-vault create secrets.yml         # Create new encrypted secrets file\nansible-vault edit secrets.yml           # Edit encrypted secrets\nansible-vault encrypt file.yml           # Encrypt existing file\nansible-vault decrypt file.yml           # Decrypt existing file\nansible-playbook site.yml --ask-vault-pass   # Run playbook with password prompt for vault\nansible-playbook site.yml --vault-password-file ~/.vault_pass.txt  # Run playbook using saved password file\n\n#ad-hoc commands\nansible all -m ping                       # Ping all nodes\nansible webservers -m apt -a \"name=nginx state=present\" -b   # Install nginx on webservers\nansible dbservers -m service -a \"name=mysql state=started\" -b # Start MySQL on dbservers\nansible all -m copy -a \"src=/etc/hosts dest=/tmp/hosts\"       # Copy file to all\nansible all -m file -a \"path=/tmp/test state=directory\"       # Ensure directory exists\nansible all -m shell -a \"uptime\"          # Run uptime command\n</code></pre> <p>Listed above are the core CLI commands for ad-hoc runs, playbooks, inventory, and Vault. They are the most frequently used.</p> <p>For roles and collections, there is an additional set of <code>ansible-galaxy</code> commands:</p>"},{"location":"2-project/notes/#role-collection-commands","title":"\ud83d\udd39 Role &amp; Collection Commands","text":"<pre><code># Install all roles and collections defined in requirements.yml\nansible-galaxy install -r requirements.yml\n\n# Install a specific role from Galaxy\nansible-galaxy role install geerlingguy.apache\n\n# Install a role from GitHub\nansible-galaxy role install git+https://github.com/geerlingguy/ansible-role-docker.git\n\n# List all installed roles\nansible-galaxy role list\n\n# Remove a role\nansible-galaxy role remove geerlingguy.apache\n\n# Init (scaffold) a new role with boilerplate structure\nansible-galaxy role init myrole\n\n# Install a collection from Galaxy\nansible-galaxy collection install community.general\n\n# Install a collection from Git repo or tarball\nansible-galaxy collection install git+https://github.com/ansible-collections/community.general.git\n\n# List installed collections\nansible-galaxy collection list\n</code></pre>"},{"location":"2-project/notes/#playbook-role-usage","title":"\ud83d\udd39 Playbook Role Usage","text":"<p>Inside a playbook, roles are invoked like this:</p> <pre><code>- name: Apply base and web roles\n  hosts: all\n  roles:\n    - base\n    - webserver\n</code></pre>"},{"location":"2-project/notes/#role-project-scaffolding","title":"\ud83d\udd39 Role Project Scaffolding","text":"<p>When you create a role with:</p> <pre><code>ansible-galaxy role init myrole\n</code></pre> <p>It generates:</p> <pre><code>myrole/\n\u251c\u2500\u2500 defaults/main.yml\n\u251c\u2500\u2500 files/\n\u251c\u2500\u2500 handlers/main.yml\n\u251c\u2500\u2500 meta/main.yml\n\u251c\u2500\u2500 tasks/main.yml\n\u251c\u2500\u2500 templates/\n\u251c\u2500\u2500 tests/test.yml\n\u2514\u2500\u2500 vars/main.yml\n</code></pre>"},{"location":"2-project/notes/#playbook-structure","title":"Playbook Structure","text":"<p>In playbooks, always target groups:</p> <pre><code>- name: Example playbook                  # Descriptive playbook name\n  hosts: webservers                       # Target group of hosts\n  become: yes                             # Run with privilege escalation (sudo)\n  vars:\n    nginx_port: 80                        # Define variables inline\n  tasks:\n    - name: Install nginx                 # Task to install nginx\n      apt:\n        name: nginx\n        state: present\n        update_cache: yes\n\n    - name: Start nginx                   # Task to ensure nginx running and enabled\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n\n    - name: Copy template                 # Deploy config template\n      template:\n        src: nginx.conf.j2\n        dest: /etc/nginx/sites-available/default\n      notify: restart nginx               # Trigger handler on change\n\n  handlers:\n    - name: restart nginx                 # Handler definition\n      service:\n        name: nginx\n        state: restarted\n</code></pre>"},{"location":"2-project/notes/#common-modules","title":"Common Modules","text":""},{"location":"2-project/notes/#system","title":"System","text":"<pre><code>apt:\n  name: nginx\n  state: present                          # Ensure nginx installed\n\nyum:\n  name: httpd\n  state: latest                           # Ensure httpd installed with latest version\n\nservice:\n  name: nginx\n  state: restarted                        # Restart nginx\n  enabled: yes                            # Ensure nginx enabled at boot\n\nuser:\n  name: deploy\n  state: present                          # Ensure user deploy exists\n  groups: sudo                            # Add user to sudo group\n\ngroup:\n  name: admins\n  state: present                          # Ensure group admins exists\n</code></pre>"},{"location":"2-project/notes/#files","title":"Files","text":"<pre><code>copy:\n  src: file.txt\n  dest: /tmp/file.txt                     # Copy file to remote\n\nfile:\n  path: /tmp/dir\n  state: directory                        # Create directory if absent\n\nlineinfile:\n  path: /etc/ssh/sshd_config\n  regexp: '^PermitRootLogin'\n  line: 'PermitRootLogin no'              # Ensure this line exists/updated in file\n\ntemplate:\n  src: config.j2\n  dest: /etc/app/config.ini               # Render Jinja2 template with vars\n</code></pre>"},{"location":"2-project/notes/#packages","title":"Packages","text":"<pre><code>apt:\n  name: nginx\n  state: present                          # Install nginx with apt\n\npip:\n  name: flask\n  version: 2.0.1                          # Install specific version of flask with pip\n\nnpm:\n  name: express\n  global: yes                             # Install express globally with npm\n</code></pre>"},{"location":"2-project/notes/#archivetransfer","title":"Archive/Transfer","text":"<pre><code>unarchive:\n  src: app.tar.gz\n  dest: /opt/\n  remote_src: yes                         # Extract archive already on remote host\n\nfetch:\n  src: /etc/hosts\n  dest: ./backup/                         # Download file from remote to control node\n</code></pre>"},{"location":"2-project/notes/#variables","title":"Variables","text":"<pre><code>vars:\n  app_port: 8080                          # Define variable inside playbook\n\ntasks:\n  - name: Example\n    debug:\n      msg: \"App running on port {{ app_port }}\"  # Use variable with Jinja2 syntax\n</code></pre> <p>Variable precedence (lowest to highest)</p> <ol> <li>Defaults in roles                      # Lowest priority</li> <li>Vars in roles/playbooks</li> <li>Host/group vars</li> <li>Extra vars (<code>-e</code>)                      # Highest priority</li> </ol>"},{"location":"2-project/notes/#conditionals-and-loops","title":"Conditionals and Loops","text":"<pre><code>tasks:\n  - name: Install nginx on Debian\n    apt:\n      name: nginx\n      state: present\n    when: ansible_os_family == \"Debian\"   # Conditional execution based on fact\n\n  - name: Create multiple users\n    user:\n      name: \"{{ item }}\"\n      state: present\n    loop:\n      - alice\n      - bob\n      - carol                             # Loop over list to create users\n</code></pre>"},{"location":"2-project/notes/#templates-jinja2","title":"Templates (Jinja2)","text":"<pre><code>server {\n  listen {{ nginx_port }};                # Insert variable value\n  server_name {{ inventory_hostname }};   # Insert current host alias\n}\n</code></pre>"},{"location":"2-project/notes/#facts","title":"Facts","text":"<pre><code>- name: Print facts\n  debug:\n    var: ansible_facts                    # Dump all facts\n\n- name: Print OS family\n  debug:\n    msg: \"{{ ansible_facts['os_family'] }}\"  # Access specific fact\n</code></pre> <p>Gathered facts: <code>ansible_hostname</code>, <code>ansible_distribution</code>, <code>ansible_memtotal_mb</code>, etc.</p>"},{"location":"2-project/notes/#handlers","title":"Handlers","text":"<pre><code>tasks:\n  - name: Update config\n    template:\n      src: config.j2\n      dest: /etc/app/config.ini\n    notify: restart app                   # Notify handler if changed\n\nhandlers:\n  - name: restart app\n    service:\n      name: app\n      state: restarted                    # Restart service only if notified\n</code></pre>"},{"location":"2-project/notes/#tags","title":"Tags","text":"<pre><code>tasks:\n  - name: Install packages\n    apt:\n      name: nginx\n      state: present\n    tags: install                         # Task tagged as \"install\"\n</code></pre> <p>Then:</p> <pre><code>ansible-playbook site.yml --tags install      # Run only install-tagged tasks\nansible-playbook site.yml --skip-tags install # Run all except install-tagged tasks\n</code></pre>"},{"location":"2-project/notes/#roles","title":"Roles","text":"<p>Directory structure:</p> <pre><code>roles/\n  webserver/\n    tasks/main.yml                          # Role tasks\n    handlers/main.yml                       # Role handlers\n    templates/                              # Jinja2 templates\n    files/                                  # Static files\n    vars/main.yml                           # Role-specific variables\n    defaults/main.yml                       # Default variable values\n</code></pre> <p>Usage:</p> <pre><code>- hosts: webservers\n  roles:\n    - webserver                             # Apply role \"webserver\"\n</code></pre> <p>Encrypted vars:</p> <pre><code>db_password: !vault |\n  $ANSIBLE_VAULT;1.1;AES256...              # Example of encrypted variable stored with Vault\n</code></pre>"},{"location":"2-project/notes/#directory-setup","title":"Directory setup","text":""},{"location":"2-project/notes/#general-structure","title":"General structure","text":"<pre><code>ansible-demo/\n\u251c\u2500\u2500 ansible.cfg               # Core configuration\n\u251c\u2500\u2500 requirements.yml          # Collections &amp; role dependencies\n\u251c\u2500\u2500 inventory/\n\u2502   \u251c\u2500\u2500 hosts.yml             # YAML inventory (preferred)\n\u2502   \u2514\u2500\u2500 group_vars/\n\u2502       \u2514\u2500\u2500 all.yml           # Global variables\n\u251c\u2500\u2500 playbooks/\n\u2502   \u2514\u2500\u2500 site.yml              # Main orchestration playbook\n\u251c\u2500\u2500 roles/\n\u2502   \u2514\u2500\u2500 base/                 # Example role\n\u2502       \u251c\u2500\u2500 tasks/\n\u2502       \u2502   \u2514\u2500\u2500 main.yml\n\u2502       \u251c\u2500\u2500 handlers/\n\u2502       \u2502   \u2514\u2500\u2500 main.yml\n\u2502       \u251c\u2500\u2500 defaults/\n\u2502       \u2502   \u2514\u2500\u2500 main.yml\n\u2502       \u251c\u2500\u2500 vars/\n\u2502       \u2502   \u2514\u2500\u2500 main.yml\n\u2502       \u251c\u2500\u2500 files/\n\u2502       \u2502   \u2514\u2500\u2500 motd.txt\n\u2502       \u251c\u2500\u2500 templates/\n\u2502       \u2502   \u2514\u2500\u2500 nginx.conf.j2\n\u2502       \u251c\u2500\u2500 tests/\n\u2502       \u2502   \u2514\u2500\u2500 molecule.yml\n\u2502       \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 tests/                    # Integration tests (Molecule + Testinfra)\n\u2502   \u2514\u2500\u2500 molecule.yml\n\u251c\u2500\u2500 .ansible-lint              # Linting rules\n\u251c\u2500\u2500 .yamllint                  # YAML style rules\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 README.md\n</code></pre> <p>Collections do not need to exist beforehand in your repo.</p>"},{"location":"2-project/notes/#how-it-works","title":"How it works:","text":"<ul> <li>You declare dependencies in <code>requirements.yml</code>.</li> <li>When you run:</li> </ul> <pre><code>ansible-galaxy install -r requirements.yml\n</code></pre> <p>Ansible will download and install those collections into the path defined in <code>ansible.cfg</code> (<code>collections_paths</code>).</p>"},{"location":"2-project/notes/#two-cases","title":"Two cases:","text":"<ol> <li> <p>Using community/public collections</p> </li> <li> <p>Example: <code>community.general</code>, <code>ansible.posix</code>.</p> </li> <li> <p>These are pulled automatically from Ansible Galaxy when you install requirements.</p> </li> <li> <p>Using private/internal collections</p> </li> <li> <p>If your org maintains its own, you can point to a Git repo or tarball in <code>requirements.yml</code>.</p> </li> <li> <p>Example:</p> <p><pre><code>collections:\n  - name: git+https://github.com/org/internal-collection.git\n</code></pre>    * In this case, the repo must exist, but you don\u2019t ship the collection itself in your starter repo \u2014 only the pointer in <code>requirements.yml</code>.</p> </li> </ol>"},{"location":"2-project/notes/#best-practice","title":"Best practice:","text":"<ul> <li>Keep only <code>requirements.yml</code> in your repo.</li> <li>Never commit collections/ or roles/ installed from Galaxy \u2192 they are reproducible from requirements.yml.</li> <li>Always bootstrap by running <code>ansible-galaxy install -r requirements.yml</code> after cloning.</li> <li>Never commit Vault passwords \u2192 only keep encrypted vault files in repo.</li> <li>Keep group_vars/ and host_vars/ in repo, but exclude sensitive vault override files if you don\u2019t want them in Git.</li> <li>Molecule test artefacts (.molecule/, .cache/) are excluded.</li> </ul>"},{"location":"2-project/notes/#testing-locally","title":"Testing Locally","text":"<p>Use containers or local VMs as disposable targets for validating playbooks that manage packages, users, files, and services.</p> <ul> <li>Not for building golden images (use Dockerfiles for that).</li> <li>Only for running and testing playbooks.</li> <li>Cheap, isolated, repeatable environments.</li> </ul>"},{"location":"2-project/notes/#1-running-playbooks-against-docker-containers","title":"1. Running Playbooks Against Docker Containers","text":"<ul> <li>Requirement: Install <code>community.docker</code> collection.</li> <li>Inventory (<code>inventory/hosts.ini</code>):</li> </ul> <pre><code>[docker]\nmycontainer ansible_connection=docker\n</code></pre> <ul> <li>Example playbook (<code>playbooks/test.yml</code>):</li> </ul> <pre><code>- hosts: docker\n  gather_facts: true\n  tasks:\n    - name: Install curl\n      package:\n        name: curl\n        state: present\n\n    - name: Add test user\n      user:\n        name: devuser\n        state: present\n</code></pre> <ul> <li>Run:</li> </ul> <pre><code>ansible-playbook -i inventory/hosts.ini playbooks/test.yml\n</code></pre> <p>Warning</p> <p>Works only if container has a package manager (Debian/Ubuntu/CentOS images). Alpine requires <code>apk</code> module.</p>"},{"location":"2-project/notes/#2-running-playbooks-against-local-vms","title":"2. Running Playbooks Against Local VMs","text":"<ul> <li>Local VMs (VirtualBox, VMware, Multipass, etc.) expose SSH.</li> <li>Example Vagrant inventory:</li> </ul> <pre><code>[vms]\nvm1 ansible_host=127.0.0.1 ansible_port=2222 ansible_user=vagrant ansible_private_key_file=.vagrant/machines/vm1/virtualbox/private_key\n</code></pre> <ul> <li>Example playbook:</li> </ul> <pre><code>- hosts: vms\n  tasks:\n    - name: Ensure Git installed\n      package:\n        name: git\n        state: present\n</code></pre>"},{"location":"2-project/notes/#3-running-playbooks-against-kind-nodes","title":"3. Running Playbooks Against KIND Nodes","text":"<ul> <li>KIND = Kubernetes IN Docker. Nodes are containers.</li> <li>Option 1: Use <code>ansible_connection=docker</code> directly:</li> </ul> <pre><code>[kind]\nkind-control-plane ansible_connection=docker\n</code></pre> <ul> <li>Option 2: Install SSH in nodes and use as normal hosts (heavier).</li> </ul> <p>Playbook example:</p> <pre><code>- hosts: kind\n  tasks:\n    - name: Install net-tools\n      package:\n        name: net-tools\n        state: present\n</code></pre>"},{"location":"2-project/notes/#4-why-this-approach","title":"4. Why This Approach","text":"<ul> <li>Containers and VMs are disposable \u2192 test without risk.</li> <li>Playbooks are portable \u2192 same YAML can run on dev containers, local VMs, or production servers.</li> <li>Debugging faster \u2192 catch logic errors (loops, conditionals, handlers) before applying to production.</li> </ul> <p>For testing Ansible playbooks (installing packages, adding users, copying configs), you need containers that:</p> <ol> <li>Have a full OS base (not minimal scratch/distroless).</li> <li>Include or support a package manager (apt, yum/dnf, apk).</li> <li>Behave similarly to real hosts you\u2019ll manage in production.</li> </ol>"},{"location":"2-project/notes/#recommended-container-images-for-ansible-testing","title":"\ud83d\udd39 Recommended Container Images for Ansible Testing","text":"OS Family Container Image Package Manager Notes Debian/Ubuntu <code>ubuntu:22.04</code>, <code>debian:12</code> <code>apt</code> Most common; good for general playbook testing. CentOS/RHEL <code>rockylinux:9</code>, <code>almalinux:9</code> <code>dnf/yum</code> Good replacement for CentOS (now EOL). Matches RHEL-family. Fedora <code>fedora:39</code> <code>dnf</code> Bleeding-edge, useful if testing modern modules. Alpine Linux <code>alpine:3.19</code> <code>apk</code> Very small, but requires <code>apk</code> module instead of <code>apt/yum</code>. Not ideal for all tests. openSUSE <code>opensuse/leap:15</code> <code>zypper</code> Useful if targeting SUSE-based systems. KIND Nodes <code>kindest/node:v1.28.0</code> (default for KIND) none by default Doesn\u2019t ship with package manager; use <code>ansible_connection=docker</code> OR inject packages manually."},{"location":"2-project/notes/#best-practice_1","title":"\ud83d\udd39 Best Practice","text":"<ul> <li> <p>For general testing:</p> </li> <li> <p>Use Ubuntu (<code>ubuntu:22.04</code>) and Rocky Linux (<code>rockylinux:9</code>).</p> </li> <li> <p>Covers both Debian-family and RHEL-family modules.</p> </li> <li> <p>For minimal footprint testing:</p> </li> <li> <p>Use Alpine with <code>apk</code> \u2192 but remember not all roles/modules support it.</p> </li> <li> <p>For multi-distro validation:</p> </li> <li> <p>Run Molecule with a matrix (Ubuntu, Rocky, Alpine) to ensure roles are portable.</p> </li> </ul>"},{"location":"2-project/notes/#example-inventory-with-multiple-test-containers","title":"\ud83d\udd39 Example: Inventory with Multiple Test Containers","text":"<pre><code>[ubuntu]\nubuntu_test ansible_connection=docker ansible_docker_extra_args=\"--name ubuntu_test ubuntu:22.04\"\n\n[rocky]\nrocky_test ansible_connection=docker ansible_docker_extra_args=\"--name rocky_test rockylinux:9\"\n\n[alpine]\nalpine_test ansible_connection=docker ansible_docker_extra_args=\"--name alpine_test alpine:3.19\"\n</code></pre> <p>\ud83d\udc49 If your goal is just basic role/playbook testing for packages + users, stick to:</p> <ul> <li><code>ubuntu:22.04</code> (Debian-family)</li> <li><code>rockylinux:9</code> (RHEL-family)</li> </ul> <p>That covers 95% of real-world production environments.</p>"},{"location":"2-project/notes/#example","title":"Example","text":"<ol> <li>Start containers manually (or with a helper script).</li> <li>Add them to your inventory as hosts with <code>ansible_connection=docker</code>.</li> <li>Point your playbook at them instead of VMs or servers.</li> </ol>"},{"location":"2-project/notes/#example-inventory-with-docker-containers","title":"Example: Inventory with Docker containers","text":"<pre><code>[docker]\nubuntu_test ansible_connection=docker\nrocky_test ansible_connection=docker\n</code></pre> <ul> <li><code>ubuntu_test</code> \u2192 points to a running <code>ubuntu:22.04</code> container.</li> <li><code>rocky_test</code> \u2192 points to a running <code>rockylinux:9</code> container.</li> <li><code>ansible_connection=docker</code> tells Ansible to execute inside the container, no SSH required.</li> </ul>"},{"location":"2-project/notes/#example-playbook","title":"Example: Playbook","text":"<pre><code>- name: Test playbook on containers\n  hosts: docker\n  gather_facts: true\n  tasks:\n    - name: Install curl\n      package:\n        name: curl\n        state: present\n\n    - name: Add user\n      user:\n        name: devuser\n        state: present\n\n    - name: Deploy MOTD\n      copy:\n        content: \"Managed by Ansible in {{ inventory_hostname }}\"\n        dest: /etc/motd\n</code></pre> <p>Run:</p> <pre><code>ansible-playbook -i inventory/hosts.ini playbooks/test.yml\n</code></pre>"},{"location":"2-project/notes/#how-youd-use-it","title":"How you\u2019d use it","text":"<ol> <li>Spin up containers:</li> </ol> <p><pre><code>docker run -dit --name ubuntu_test ubuntu:22.04 bash\ndocker run -dit --name rocky_test rockylinux:9 bash\n</code></pre> 2. Run playbook \u2192 Ansible runs inside the containers. 3. Inspect results:</p> <pre><code>docker exec -it ubuntu_test cat /etc/motd\ndocker exec -it rocky_test id devuser\n</code></pre>"},{"location":"2-project/notes/#why-this-works","title":"Why this works","text":"<ul> <li>Ansible doesn\u2019t care if the target is a container or a VM \u2014 as long as a connection plugin (<code>docker</code> or <code>ssh</code>) works.</li> <li>By reusing your playbooks against containers, you can validate logic quickly before applying to \u201creal\u201d VMs or servers.</li> </ul>"},{"location":"2-project/notes/#semaphore","title":"Semaphore","text":"<p>Semaphore allows us to use Ansible with a web UI. Not only that, but it is a Modern UI and powerful API for Ansible, Terraform/OpenTofu/Terragrunt, PowerShell and other DevOps tools.</p> <p>Run semaphore with:</p> <pre><code>task dev\n</code></pre> <p>Username: admin Password: admin123</p> <p>Some boilerplate playbooks can be found Here</p>"},{"location":"2-project/setup/","title":"Setting things up","text":""},{"location":"2-project/uv-notes/","title":"uv Cheat Sheet","text":""},{"location":"2-project/uv-notes/#installation","title":"Installation","text":"<pre><code># Linux / macOS\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows (PowerShell)\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Verify install\nuv --version\n</code></pre>"},{"location":"2-project/uv-notes/#projects","title":"Projects","text":"<pre><code># Create a new project in folder \"myproj\"\nuv init myproj\n\n# Create a new project in the current folder\nuv init\n</code></pre>"},{"location":"2-project/uv-notes/#dependencies","title":"Dependencies","text":"<pre><code># Add a package\nuv add requests\n\n# Add a package with version\nuv add django==4.2.7\n\n# Add a development dependency\nuv add --dev pytest\n\n# Remove a package\nuv remove requests\n</code></pre>"},{"location":"2-project/uv-notes/#locking-and-installing","title":"Locking and Installing","text":"<pre><code># Install all dependencies into the environment (creates uv.lock if missing)\nuv sync\n\n# Update dependencies to latest allowed versions\nuv sync --upgrade\n\n# Compile lock file from requirements input\nuv pip compile pyproject.toml\n\n# Sync environment to match lock file\nuv pip sync uv.lock\n</code></pre>"},{"location":"2-project/uv-notes/#virtual-environments","title":"Virtual Environments","text":"<pre><code># Create a virtual environment\nuv venv\n\n# Create with specific Python version\nuv venv --python 3.11\n\n# Show where environment is\nuv venv --path\n</code></pre>"},{"location":"2-project/uv-notes/#running-code","title":"Running Code","text":"<pre><code># Run Python inside environment\nuv run python\n\n# Run a script\nuv run myscript.py\n\n# Run a command with dependencies\nuv run pytest\n</code></pre>"},{"location":"2-project/uv-notes/#python-versions","title":"Python Versions","text":"<pre><code># List installed Python versions\nuv python list\n\n# Install Python 3.11\nuv python install 3.11\n\n# Upgrade Python 3.11 to latest patch\nuv python upgrade 3.11\n\n# Show default Python\nuv python pin\n</code></pre>"},{"location":"2-project/uv-notes/#inspecting","title":"Inspecting","text":"<pre><code># Show dependency tree\nuv tree\n\n# Show project metadata\nuv project show\n</code></pre>"},{"location":"2-project/uv-notes/#building-and-publishing","title":"Building and Publishing","text":"<pre><code># Build source distribution and wheel\nuv build\n\n# Publish to PyPI (requires credentials)\nuv publish\n</code></pre>"},{"location":"2-project/uv-notes/#tools","title":"Tools","text":"<pre><code># Install a tool globally (example: black)\nuv tool install black\n\n# Run a tool\nuv tool run black --version\n\n# List installed tools\nuv tool list\n\n# Remove a tool\nuv tool uninstall black\n</code></pre>"},{"location":"2-project/uv-notes/#useful-options","title":"Useful Options","text":"<pre><code># Dry run, show what would happen\n--dry-run\n\n# Use lowest compatible versions\n--resolution=lowest\n\n# Target a different Python version when resolving\n--python-version 3.10\n</code></pre> <p>Correct. The cheat sheet I gave did not include <code>uvx</code>. Here is the missing section.</p>"},{"location":"2-project/uv-notes/#uvx-cheat-sheet","title":"<code>uvx</code> Cheat Sheet","text":"<p><code>uvx</code> is a shortcut to run any Python package or script without pre-installing it. It automatically downloads the package into a temporary cache, runs it, and reuses cached copies on later runs. It is like <code>npx</code> in Node.js.</p>"},{"location":"2-project/uv-notes/#syntax","title":"Syntax","text":"<pre><code>uvx &lt;package&gt; [arguments...]\n</code></pre>"},{"location":"2-project/uv-notes/#examples","title":"Examples","text":"<pre><code># Run black without installing globally\nuvx black myfile.py\n\n# Run flake8\nuvx flake8 src/\n\n# Run httpie\nuvx http --version\n\n# Run Django admin script\nuvx django-admin startproject mysite\n</code></pre>"},{"location":"2-project/uv-notes/#pinning-versions","title":"Pinning Versions","text":"<pre><code># Run a specific version of black\nuvx black==23.9.1 --version\n</code></pre>"},{"location":"2-project/uv-notes/#with-python-scripts","title":"With Python Scripts","text":"<pre><code># Run a Python script that is not installed\nuvx -m http.server 8000\n</code></pre>"},{"location":"2-project/uv-notes/#notes","title":"Notes","text":"<ul> <li><code>uvx</code> installs packages into a cache under your user directory.</li> <li>First run is slower, later runs are instant (from cache).</li> <li>If you need to clear cache:</li> </ul> <p><pre><code>uv cache clean\n</code></pre> * Useful for tools (linters, formatters, build helpers) you do not want in your project dependencies. * Equivalent to <code>npx</code> in Node.js or <code>pipx run</code> in Python.</p> <p><code>uv tool list</code> will never show what is in <code>pyproject.toml</code>.</p> <p>Two separate systems:</p> Scope Command What it manages Where it records state Project dependencies <code>uv add</code>, <code>uv remove</code>, <code>uv sync</code> The packages your project uses <code>pyproject.toml</code> + <code>uv.lock</code> Global tools <code>uv tool install</code>, <code>uv tool uninstall</code>, <code>uv tool list</code> Stand-alone CLI tools, like <code>black</code>, <code>ruff</code>, <code>httpie</code> User\u2019s tool directory (<code>~/.local/share/uv/tools/</code> by default) <p>So if you want to see project dependencies, use:</p> <pre><code>uv tree          # dependency graph\n</code></pre> <p>If you want to see globally installed tools, then use:</p> <pre><code>uv tool list\n</code></pre> <p>They are intentionally kept separate.</p> <p>With <code>uv</code>, you never edit <code>[tool.poetry.dependencies]</code> like in Poetry. You only use standard PEP 621 fields in <code>pyproject.toml</code>.</p> <p>Two ways to add dependencies:</p>"},{"location":"2-project/uv-notes/#1-let-uv-edit-pyprojecttoml-for-you","title":"1. Let <code>uv</code> edit <code>pyproject.toml</code> for you","text":"<pre><code># Add a runtime dependency\nuv add requests\n\n# Add a dev dependency\nuv add --dev pytest\n</code></pre> <p>This will:</p> <ul> <li>Update <code>pyproject.toml</code> under <code>[project]</code> or <code>[tool.uv]</code> (depending on context).</li> <li>Regenerate <code>uv.lock</code>.</li> </ul>"},{"location":"2-project/uv-notes/#2-edit-pyprojecttoml-manually","title":"2. Edit <code>pyproject.toml</code> manually","text":"<p>Minimal example with dependencies written by hand:</p> <pre><code>[project]\nname = \"myproj\"\nversion = \"0.1.0\"\ndescription = \"Example project\"\nrequires-python = \"&gt;=3.10\"\n\ndependencies = [\n    \"requests&gt;=2.31\",\n    \"flask&gt;=2.3\",\n]\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest&gt;=7.0\",\n]\n</code></pre> <p>Then run:</p> <pre><code>uv sync\n\n# List installed packages (table)\nuv pip list\n\n# Freeze environment (pip-compatible format)\nuv pip freeze\n</code></pre> <p>This will install what you declared and create/update <code>uv.lock</code>.</p>"},{"location":"2-project/uv-notes/#key-difference-from-poetry","title":"Key difference from Poetry","text":"<ul> <li>Poetry used <code>[tool.poetry.dependencies]</code> and <code>[tool.poetry.dev-dependencies]</code>.</li> <li>uv uses the PEP 621 standard <code>[project]</code> section for main dependencies.</li> <li>Dev dependencies live in <code>[tool.uv.dev-dependencies]</code>.</li> </ul>"},{"location":"2-project/tasks/0-overview/","title":"Overview","text":"<p>This Taskfile defines automation tasks to simplify development workflows and ensure consistency across environments.</p> <p>It abstracts repetitive shell commands into named tasks you can run with:</p> <pre><code>task &lt;task-name&gt; # runs a task\n</code></pre> <p>You can list all available tasks with:</p> <pre><code>task --list-all\n</code></pre> <p>For detailed details about taskfile use:</p> <ul> <li>Main Taskfile</li> <li>GitFlow Taskfile</li> </ul>"},{"location":"2-project/tasks/0-overview/#contact","title":"Contact","text":"<p>Questions or issues with GitFlow setup? Reach out via GitHub Issues or email at your.email@example.com.</p>"},{"location":"2-project/tasks/1-main-taskfile/","title":"Main Taskfile Overview","text":"<p>This section describes the purpose and layout of the main <code>Taskfile.yml</code> used in this project. The Taskfile defines automation tasks to simplify development workflows and ensure consistency across environments.</p>"},{"location":"2-project/tasks/1-main-taskfile/#purpose-of-this-taskfile","title":"Purpose of This Taskfile","text":"<p>This Taskfile provides command-line shortcuts for tasks like:</p> <ul> <li>Project setup</li> <li>Development environment bootstrapping</li> <li>Application deployment</li> <li>Local documentation serving</li> <li>Cleanup and teardown</li> </ul> <p>It abstracts repetitive shell commands into named tasks you can run with:</p> <pre><code>task &lt;task-name&gt;\n</code></pre>"},{"location":"2-project/tasks/1-main-taskfile/#core-sections","title":"Core Sections","text":""},{"location":"2-project/tasks/1-main-taskfile/#1-setup-initialization","title":"1. Setup &amp; Initialization","text":"<p>Includes tasks for:</p> <ul> <li>Installing dependencies</li> <li>Setting up local development tools</li> <li>Generating keys or configs (if applicable)</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#2-development-workflow","title":"2. Development Workflow","text":"<p>Common tasks for:</p> <ul> <li>Starting local services or dev containers</li> <li>Running dev servers</li> <li>Applying Kubernetes configs or local manifests</li> <li>Watching for file changes</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#3-documentation","title":"3. Documentation","text":"<p>Tasks to:</p> <ul> <li>Serve documentation locally (e.g., MkDocs)</li> <li>Build or deploy docs (if using GitHub Pages or mike)</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#4-deployment-automation","title":"4. Deployment &amp; Automation","text":"<p>Tasks may automate:</p> <ul> <li>Building and pushing Docker images</li> <li>Running linters or formatters</li> <li>Applying infrastructure changes (e.g., with Terraform)</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#5-cleanup-teardown","title":"5. Cleanup &amp; Teardown","text":"<p>Includes safe commands to:</p> <ul> <li>Tear down local clusters or containers</li> <li>Remove generated files or environments</li> <li>Reset state for fresh runs</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#typical-usage-flow","title":"Typical Usage Flow","text":"<p>A typical flow using this Taskfile might look like:</p> <ul> <li>Set up your environment:</li> </ul> <pre><code>task setup\n</code></pre> <ul> <li>Start development:</li> </ul> <pre><code>task dev\n</code></pre> <ul> <li>Serve documentation:</li> </ul> <pre><code>task docs\n</code></pre> <ul> <li>Clean up:</li> </ul> <pre><code>task cleanup\n</code></pre>"},{"location":"2-project/tasks/1-main-taskfile/#notes","title":"Notes","text":"<ul> <li>To list all available tasks:</li> </ul> <pre><code>task --list-all\n</code></pre> <ul> <li>Variables and flags can be passed to tasks like so:</li> </ul> <pre><code>task my-task &lt;var&gt;=&lt;value&gt;\n</code></pre> <ul> <li>You can structure task dependencies using <code>deps:</code> and reuse shell logic cleanly across environments.</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#tips","title":"Tips","text":"Key Description dotenv + env: auto-load .env files and allow task-specific overrides. vars: static or dynamic variables (via shell) for templated substitution. prompt: even for setup or prod, ask user before proceeding. preconditions: enforce environment state before running. deps: define ordering (serial) via deps for safety and repeatability. internal: hide helper tasks from user listings. platforms: restrict tasks to specific OS/arch. requires: enforce required input variables. status: skip tasks if outputs already exist."},{"location":"2-project/tasks/1-main-taskfile/#related-docs","title":"Related Docs","text":"<ul> <li>GitFlow Taskfile</li> <li>Getting Started</li> <li>Architecture Overview</li> </ul>"},{"location":"2-project/tasks/1-main-taskfile/#contact","title":"Contact","text":"<p>For issues or suggestions related to automation and task structure, open an issue or contact the maintainer at seannjela@outlook.com.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/","title":"GitFlow Taskfile Overview","text":"<p>This page explains the structure and functionality of the <code>Taskfile.gitflow.yml</code> file, which automates a standardized Git workflow using Git Flow conventions. This taskfile is designed to simplify and formalize branching, releasing, and hotfixing in projects that follow the GitFlow methodology.</p> <p>It is optional to use gitflow.</p> <p>If you do not want to use it, you can remove the <code>Taskfile.gitflow.yml</code> file and unlink it from the <code>Taskfile.yaml</code> file (remove the <code>includes</code> section). If you cannot find the section use <code>CTRL + F</code> to search for Taskfile.yaml.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#what-is-git-flow","title":"What is Git Flow?","text":"<p>Git Flow is a branching strategy that separates feature development from production releases. It introduces long-lived branches like <code>main</code> and <code>develop</code>, as well as temporary branches for features, releases, and hotfixes.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#purpose-of-this-taskfile","title":"Purpose of This Taskfile","text":"<p>The <code>Taskfile.gitflow.yml</code> automates repetitive Git Flow actions using the <code>task</code> CLI tool. It allows you to:</p> <ul> <li>Initialize a Git Flow structure with default branches and prefixes</li> <li>Create and finish feature branches</li> <li>Create release and hotfix branches</li> <li>Push and merge code with consistent naming and flow</li> <li>Eliminate manual mistakes in branch naming or merging</li> </ul> <p>This is especially useful in teams or long-running solo projects where structured release cycles are important.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#what-this-taskfile-automates","title":"What This Taskfile Automates","text":"<p>Here\u2019s a breakdown of what\u2019s covered:</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#1-initialization","title":"1. Initialization","text":"<ul> <li>Sets up Git Flow with <code>main</code> as the production branch and <code>develop</code> for ongoing work.</li> <li>Configures standard prefixes (<code>feature/</code>, <code>release/</code>, <code>hotfix/</code>, etc.).</li> <li>Ensures required branches (<code>main</code>, <code>develop</code>) exist locally and remotely.</li> <li>Optionally initializes the <code>gh-pages</code> branch for documentation deployments.</li> </ul> <p>This is typically run once at the start of the project using <code>task -t Taskfile.gitflow.yml init</code>.</p>"},{"location":"2-project/tasks/2-gitflow-taskfile/#2-feature-branch-management","title":"2. Feature Branch Management","text":"<ul> <li>Start a new feature branch from <code>develop</code></li> <li>Finish a feature by merging it back into <code>develop</code></li> <li>Automatically push changes to the remote</li> <li>Prevents common mistakes like forgetting to push or rebase</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#3-release-branch-management","title":"3. Release Branch Management","text":"<ul> <li>Create a release branch off <code>develop</code></li> <li>Optionally tag a version</li> <li>Merge into <code>main</code> and <code>develop</code></li> <li>Clean up the release branch</li> <li>Pushes changes and tags to the remote</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#4-hotfix-branch-management","title":"4. Hotfix Branch Management","text":"<ul> <li>Create a hotfix directly off <code>main</code> (for production issues)</li> <li>Merge back into both <code>main</code> and <code>develop</code></li> <li>Optionally tag the hotfix release</li> <li>Push changes and remove local branches</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#5-branch-cleanup-and-syncing","title":"5. Branch Cleanup and Syncing","text":"<ul> <li>Deletes local feature/release branches after merging</li> <li>Pulls and syncs remote branches as needed</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#typical-usage-flow","title":"Typical Usage Flow","text":"<ol> <li> <p>Initialize GitFlow structure <pre><code>task init\n</code></pre></p> </li> <li> <p>Start a new feature <pre><code>task feature:start name=\"add-login\"\n</code></pre></p> </li> <li> <p>Finish a feature <pre><code>task feature:finish name=\"add-login\"\n</code></pre></p> </li> <li> <p>Start a release <pre><code>task release:start version=\"1.0.0\"\n</code></pre></p> </li> <li> <p>Start a hotfix <pre><code>task hotfix:start version=\"1.0.1\"\n</code></pre></p> </li> <li> <p>Finish a release <pre><code>task release:finish version=\"1.0.0\"\n</code></pre></p> </li> <li> <p>Finish a hotfix <pre><code>task hotfix:finish version=\"1.0.1\"\n</code></pre></p> </li> </ol>"},{"location":"2-project/tasks/2-gitflow-taskfile/#when-should-you-use-this","title":"When Should You Use This?","text":"<p>Use this taskfile when:</p> <ul> <li>You want consistent branch names and GitFlow discipline</li> <li>You're working in long-lived projects that ship versioned releases</li> <li>You have documentation (e.g. via <code>mike</code>) that needs coordinated tagging</li> <li>You want to automate repetitive Git steps safely</li> </ul> <p>Avoid using it if:</p> <ul> <li>Your workflow is trunk-based (i.e., no <code>develop</code>)</li> <li>You're doing rapid prototyping without versioning</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#notes","title":"Notes","text":"<ul> <li>This taskfile assumes Git is already initialized and the remote origin is set.</li> <li>It is safe to re-run <code>init</code>; it won\u2019t overwrite existing GitFlow config.</li> <li>The file uses <code>{{.VAR_NAME}}</code> placeholders \u2014 these are defined in the task's command-line usage.</li> <li>You can see available tasks by running:</li> </ul> <pre><code>task --list-all\n</code></pre>"},{"location":"2-project/tasks/2-gitflow-taskfile/#related-docs","title":"Related Docs","text":"<ul> <li>Main Taskfile Overview</li> <li>Getting Started</li> <li>Architecture</li> </ul>"},{"location":"2-project/tasks/2-gitflow-taskfile/#contact","title":"Contact","text":"<p>Questions or issues with GitFlow setup? Reach out via GitHub Issues or email at seannjela@outlook.com.</p>"},{"location":"3-troubleshooting/0-overview/","title":"Troubleshooting Guide Overview","text":"<p>Welcome to the troubleshooting section of this documentation. This guide exists to help you diagnose and resolve common issues that may arise while using or setting up this project.</p> <p>Use the search bar at the top of this page to type keywords related to your issue (e.g., docker, cluster, permissions) and quickly find relevant entries.</p>"},{"location":"3-troubleshooting/0-overview/#what-youll-find-here","title":"What You'll Find Here","text":"<p>Each page in this section covers a specific issue or category of problems. These are meant to be: - Concise - Actionable - Focused on real problems encountered during development or deployment</p> <p>You can browse specific problem pages here:</p> <ul> <li>Problem 1</li> <li>Problem 2</li> <li>(More will be added as new issues are documented)</li> </ul> <p>Important Disclaimer</p> <p>This is a personal documentation site. I am maintaining it solo and cannot guarantee that every issue is fully documented or resolved. If you don\u2019t find a solution here, don\u2019t panic \u2014 most tools used in this project (e.g., Docker, Kubernetes, Terraform, Devbox) are widely adopted and well-supported. Try these resources first:</p> <ol> <li>ChatGPT or another AI assistant \u2013 Quick answers and guided debugging  </li> <li>YouTube \u2013 Visual walkthroughs for complex tools or errors  </li> <li>Google \u2013 Forums, GitHub Issues, and StackOverflow posts are often goldmines  </li> </ol>"},{"location":"3-troubleshooting/0-overview/#pro-tip","title":"Pro Tip","text":"<p>Tip</p> <p>When searching using the search bar above, include the name of the tool or parts of the error message (in quotes if exact), e.g.:</p> <p>\"helm install\" or \"helm\" \"chart not found\" or \"not found\" \"terraform apply\" or \"terraform\" \"invalid provider configuration\" or \"provider not found\" \"kubectl apply\" or \"kubectl\" \"namespace not found\" or \"namespace does not exist\"</p> <p>Thank you for your patience and initiative \u2014 the more we learn from problems, the better this documentation will become.</p>"},{"location":"3-troubleshooting/1-problem1/","title":"Problem Title (Short and Specific)","text":"<p>A short one-liner summary of the issue, e.g., \u201cHelm chart fails with \u2018chart not found\u2019 error\u201d.</p>"},{"location":"3-troubleshooting/1-problem1/#context","title":"Context","text":"<p>Briefly describe when/where this issue happens: - What tool was being used? - What command was run? - What environment (e.g., Devbox, Docker, local cluster)? - Optional: Any preconditions or relevant setup</p>"},{"location":"3-troubleshooting/1-problem1/#symptoms","title":"Symptoms","text":"<p>List or describe the symptoms: - Error messages (you can add real output later) - Logs or console behavior - What \"broke\" or stopped working</p>"},{"location":"3-troubleshooting/1-problem1/#possible-causes","title":"Possible Causes","text":"<p>List 1\u20133 likely causes of this issue: - Misconfiguration - Dependency/version mismatch - Network or permissions issue</p>"},{"location":"3-troubleshooting/1-problem1/#resolution-if-available","title":"Resolution (If Available)","text":"<p>Leave this blank until you've confirmed a fix.</p>"},{"location":"3-troubleshooting/1-problem1/#workarounds-optional","title":"Workarounds (Optional)","text":"<p>Alternative approaches or partial fixes that helped during debugging.</p>"},{"location":"3-troubleshooting/1-problem1/#external-references","title":"External References","text":"<p>Useful links, docs, or forum threads: - Stack Overflow Thread - Official Docs - GitHub Issue</p>"},{"location":"3-troubleshooting/1-problem1/#notes","title":"Notes","text":"<ul> <li>Is this a recurring issue?</li> <li>Does it affect production or just local dev?</li> <li>Can this be caught with a precheck or task later?</li> </ul>"},{"location":"3-troubleshooting/2-problem2/","title":"Problem Title (Short and Specific)","text":"<p>A short one-liner summary of the issue, e.g., \u201cHelm chart fails with \u2018chart not found\u2019 error\u201d.</p>"},{"location":"3-troubleshooting/2-problem2/#context","title":"Context","text":"<p>Briefly describe when/where this issue happens: - What tool was being used? - What command was run? - What environment (e.g., Devbox, Docker, local cluster)? - Optional: Any preconditions or relevant setup</p>"},{"location":"3-troubleshooting/2-problem2/#symptoms","title":"Symptoms","text":"<p>List or describe the symptoms: - Error messages (you can add real output later) - Logs or console behavior - What \"broke\" or stopped working</p>"},{"location":"3-troubleshooting/2-problem2/#possible-causes","title":"Possible Causes","text":"<p>List 1\u20133 likely causes of this issue: - Misconfiguration - Dependency/version mismatch - Network or permissions issue</p>"},{"location":"3-troubleshooting/2-problem2/#resolution-if-available","title":"Resolution (If Available)","text":"<p>Leave this blank until you've confirmed a fix.</p>"},{"location":"3-troubleshooting/2-problem2/#workarounds-optional","title":"Workarounds (Optional)","text":"<p>Alternative approaches or partial fixes that helped during debugging.</p>"},{"location":"3-troubleshooting/2-problem2/#external-references","title":"External References","text":"<p>Useful links, docs, or forum threads: - Stack Overflow Thread - Official Docs - GitHub Issue</p>"},{"location":"3-troubleshooting/2-problem2/#notes","title":"Notes","text":"<ul> <li>Is this a recurring issue?</li> <li>Does it affect production or just local dev?</li> <li>Can this be caught with a precheck or task later?</li> </ul>"},{"location":"4-about/0-about/","title":"About Me","text":"<p>Dang, you really wanna know huh?</p> <p>I\u2019m Sean Njela, DevOpsSean. I'm a developer, engineer, and lifelong learner documenting my personal and professional projects.</p> <p>This site serves as a central hub for my technical work, built using MkDocs and organized to reflect real-world implementations, lessons learned, and ongoing exploration in areas like DevOps, infrastructure, automation, and system design.</p>"},{"location":"4-about/0-about/#why-this-exists","title":"Why This Exists","text":"<p>This documentation is part of an ongoing effort to:</p> <ul> <li>Capture complex project setups in a reusable, referenceable format</li> <li>Practice clear technical communication</li> <li>Save future-me from future-headaches</li> <li>Share knowledge with others who might stumble across this work</li> </ul> <p>Whether you're here to learn, debug, borrow ideas, or just browse, you're welcome.</p>"},{"location":"4-about/0-about/#tools-and-tech-i-often-work-with","title":"Tools and Tech I Often Work With","text":"<p>Some of the technologies you'll find across these projects:</p> <ul> <li>Containers: Docker, Kubernetes, Kind</li> <li>Infrastructure: Terraform, Helm, Devbox</li> <li>Automation: Taskfile, Make, CI/CD workflows</li> <li>Docs: MkDocs, markdown, GitHub Pages</li> <li>Languages: Python, Bash, YAML</li> </ul> <p>This stack evolves as I experiment and learn \u2014 not every project will use everything.</p>"},{"location":"4-about/0-about/#about-this-site","title":"About This Site","text":"<ul> <li>Built with <code>mkdocs-material</code></li> <li>Versioned using <code>mike</code></li> <li>Fully local-first and Git-managed</li> <li>Organized by topic, not tool \u2014 documentation follows the problem or pattern</li> </ul>"},{"location":"4-about/0-about/#contact","title":"Contact","text":"<p>I\u2019m always open to questions, feedback, or conversation:</p> <ul> <li>GitHub: @sean-njela</li> <li>Email: sean.njela@gmail.com</li> <li>Twitter/X: @devopssean</li> </ul> <p>Thanks for visiting !</p>"}]}